{"version":3,"sources":["colors.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","editText","setEditText","toDos","setToDos","editMode","setEditMode","onEditText","payload","saveToDos","toSave","a","async","AsyncStorage","setItem","JSON","stringify","useEffect","getItem","s1","s2","parse","workbtn","loadToDos","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","newToDos","Date","now","done","edit","onChangeText","value","returnKeyType","placeholder","input","ScrollView","Object","keys","map","key","toDo","flexDirection","workDone","FontAwesome5","name","size","editToDo","defaultValue","editInput","workDoneText","toDoText","setEditToDo","MaterialIcons","marginRight","Platform","OS","confirm","Alert","alert","deleteToDo","FontAwesome","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","textDecorationLine","width","borderBottomColor","borderBottomWidth"],"mappings":"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","file":"static/js/app.4166793b.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n  toDoBg: \"#5C5C60\",\r\n};\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n  Alert,\n  Platform,\n} from \"react-native\";\nimport { theme } from \"./colors\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { FontAwesome, FontAwesome5, MaterialIcons } from \"@expo/vector-icons\";\n\nconst STORAGE_KEY = \"@toDos\"; //key는 또 쓸거임!\nconst CURRENT_BTN = \"@cureentBtn\"; //key는 또 쓸거임!\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [editText, setEditText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n  const [editMode, setEditMode] = useState(false);\n  const travel = () => {\n    setWorking(false);\n    AsyncStorage.setItem(CURRENT_BTN, JSON.stringify({ workbtn: false }));\n  };\n  const work = () => {\n    setWorking(true);\n    AsyncStorage.setItem(CURRENT_BTN, JSON.stringify({ workbtn: true }));\n  };\n  const onChangeText = (payload) => setText(payload);\n  const onEditText = (payload) => setEditText(payload);\n  const saveToDos = async (toSave) => {\n    //(key,value) value는 string이어야 함\n    await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\n  };\n  const loadToDos = async () => {\n    const s1 = await AsyncStorage.getItem(STORAGE_KEY);\n    const s2 = await AsyncStorage.getItem(CURRENT_BTN);\n    //받아온 string 다시 객체로 만들어줌\n    if (s1) {\n      setToDos(JSON.parse(s1));\n    }\n    if (s2) {\n      setWorking(JSON.parse(s2).workbtn);\n    }\n  };\n\n  useEffect(() => {\n    //데이터 로드\n    loadToDos();\n  }, []);\n\n  const addTodo = async () => {\n    if (text === \"\") {\n      //비어있으면 그냥 return;\n      return;\n    }\n    const newToDos = {\n      ...toDos,\n      [Date.now()]: { text, working, done: false, edit: false },\n    };\n    //(목표객체, 출처객체, 추가하려는객체)\n    setToDos(newToDos); //newToDos는 기존과 새로운게 합쳐진 객체\n    await saveToDos(newToDos); //add되는 순간 save됨\n    setText(\"\");\n  };\n\n  const deleteToDo = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"Do you want to delete this To Do?\");\n      if (ok) {\n        const newToDos = { ...toDos };\n        delete newToDos[key];\n        setToDos(newToDos);\n        saveToDos(newToDos);\n      }\n    } else {\n      Alert.alert(\"Delete To Do?\", \"Are you sure?\", [\n        { text: \"Cancel\" },\n        {\n          text: \"I'm Sure\",\n          style: \"destructive\", //스타일도 줄수있음! ios기준이래.\n          onPress: () => {\n            const newToDos = { ...toDos };\n            delete newToDos[key];\n            setToDos(newToDos);\n            saveToDos(newToDos);\n          },\n        },\n      ]);\n    }\n  };\n\n  const editToDo = async (key) => {\n    //text 세팅해줄예정\n    const newToDos = { ...toDos };\n    if (editText === \"\" || editText === newToDos[key].text) {\n      newToDos[key].edit = false;\n      setToDos(newToDos);\n      return;\n    }\n    newToDos[key].text = editText;\n    newToDos[key].edit = false;\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n  };\n\n  const setEditToDo = async (key) => {\n    setEditMode(!editMode);\n\n    if (editMode) {\n      const newToDos = { ...toDos };\n      newToDos[key].edit = true;\n      setToDos(newToDos);\n    } else {\n      const newToDos = { ...toDos };\n      newToDos[key].edit = false;\n    }\n    setToDos(newToDos);\n  };\n\n  const workDone = (key) => {\n    const newToDos = { ...toDos };\n    newToDos[key].done = !newToDos[key].done;\n    setToDos(newToDos);\n    saveToDos(newToDos);\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      {/* 헤더 */}\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              fontSize: 30,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: working ? \"white\" : theme.grey,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              fontSize: 30,\n              fontWeight: \"600\",\n              color: \"white\",\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View>\n        <TextInput\n          onSubmitEditing={addTodo}\n          onChangeText={onChangeText}\n          value={text}\n          returnKeyType=\"done\"\n          placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\n          style={styles.input}\n        ></TextInput>\n      </View>\n      <ScrollView>\n        {Object.keys(toDos).map((key) =>\n          toDos[key].working === working ? (\n            <View style={styles.toDo} key={key}>\n              <View style={{ flexDirection: \"row\" }}>\n                <TouchableOpacity onPress={() => workDone(key)}>\n                  <FontAwesome5\n                    name={toDos[key].done ? \"check-square\" : \"square\"}\n                    size={24}\n                    style={styles.workDone}\n                  />\n                </TouchableOpacity>\n                {toDos[key].edit ? (\n                  <TextInput\n                    onSubmitEditing={() => {\n                      editToDo(key);\n                    }}\n                    onChangeText={onEditText}\n                    defaultValue={toDos[key].text}\n                    returnKeyType=\"done\"\n                    style={styles.editInput}\n                  ></TextInput>\n                ) : (\n                  <Text\n                    style={\n                      toDos[key].done ? styles.workDoneText : styles.toDoText\n                    }\n                  >\n                    {toDos[key].text}\n                  </Text>\n                )}\n              </View>\n              <View style={{ flexDirection: \"row\" }}>\n                <TouchableOpacity onPress={() => setEditToDo(key)}>\n                  <MaterialIcons\n                    style={{ marginRight: 14 }}\n                    name=\"edit\"\n                    size={24}\n                    color=\"#fff\"\n                  />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => deleteToDo(key)}>\n                  <FontAwesome name=\"trash\" size={24} color=\"#fff\" />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 30,\n    //컨테이너 가로 방향으로 padding을 20px줌\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15, //인풋 창 크기\n    paddingHorizontal: 20, //글자 위치\n    borderRadius: 30,\n    marginVertical: 20,\n    fontSize: 16,\n  },\n  toDo: {\n    backgroundColor: theme.grey,\n    marginBottom: 10,\n    paddingVertical: 25,\n    paddingHorizontal: 30,\n    borderRadius: 15,\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  },\n  toDoText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n  },\n  workDone: {\n    marginRight: 10,\n    color: \"white\",\n  },\n  workDoneText: {\n    color: \"white\",\n    fontSize: 16,\n    fontWeight: \"500\",\n    textDecorationLine: \"line-through\",\n  },\n  editInput: {\n    width: 180,\n    fontSize: 16,\n    fontWeight: \"500\",\n    color: \"white\",\n    borderBottomColor: \"white\",\n    borderBottomWidth: 2,\n  },\n});\n"],"sourceRoot":""}